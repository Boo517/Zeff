# -*- coding: utf-8 -*-
"""
Created on Fri Apr  5 16:24:39 2024

@author: noahd
"""

#%%
"""
IMPORTS
"""
import file_ui_utils as utils
import numpy as np
import matplotlib.pyplot as plt
import os

#%%
"""
CONSTANTS
"""
px2um = 0.08 # pixel size [um], multiply pixels by it to convert to um
# refraction ratios (beta over delta) for sandwich materials
# from henke.lbl.gov (Lawrence Berkeley website) except aerogel, which
# is from files Pia gave me
pp_ratio = 0.001204 # ablator
pn_ratio = .00136389 # pusher
foam_ratio = .0020966 # foam
al_ratio = 0.01767 # shield

#%%
"""
FILE SELECT
"""
ui = utils.UI()
# choose transmission and integrated phase csv
trans_file = ui.getfile("choose transmission csv")
folder = utils.get_parent(trans_file)
trans = np.loadtxt(trans_file, delimiter=",", skiprows=1) # [px], [unitless]
# have to skip top line generated by imagej which has labels
trans[:,0] = trans[:,0]*px2um   # convert -> [um], [unitless]

phase_file = ui.getfile("choose integrated phase csv")
phase = np.loadtxt(phase_file, delimiter=",", skiprows=0) # [um], [rad]
# no need to skip rows since integration script removes top line already

#%%
"""
ZEFF
"""
zeff = phase.copy()
zeff[:,1] = -np.log(trans[:,1])/(phase[:,1])

# plot
fig, ax = plt.subplots()
ax.plot(trans[:,0], trans[:,1])
ax.set_title("Transmission")
ax.set_xlabel("distance [um]")
ax.set_ylabel("Transmission")

fig, ax = plt.subplots()
ax.plot(phase[:,0], phase[:,1])
ax.set_title("Phase")
ax.set_xlabel("distance [um]")
ax.set_ylabel("Phase [rad]")

fig, ax = plt.subplots()
ax.plot(zeff[:,0], zeff[:,1], color='C0', label="Experimental")
# materials
plt.axhline(y=al_ratio, color='C1', linestyle='--', label="Aluminum")
plt.axhline(y=foam_ratio, color='C2', linestyle='--', label="C15H2OO6 Foam")
plt.axhline(y=pn_ratio, color='C3', linestyle='--', label="Parylene-N")
plt.axhline(y=pp_ratio, color='C4', linestyle='--', label="Polypropylene")
ax.legend()
# ax.set_title("Zeff")
ax.set_xlabel("distance [μm]")
ax.set_ylabel("β/δ")
plt.show()

#%%
"""
SAVE
"""
# change to folder where trans image gotten from
os.chdir(folder)
# save csv
np.savetxt("zeff.csv", zeff, delimiter=",")
# get avg, stdev, write to a txt file
avg = np.mean(zeff[:,1])
std = np.std(zeff[:,1])
with open("zeff.txt", 'w') as f:
    f.write("Average: {:.3f}\nStd: {:.3f}".format(avg, std))
